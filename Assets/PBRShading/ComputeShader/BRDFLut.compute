// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel IntegrateBRDF

#include "Assets/PBRShading/Shaders/Include/IBLEquation.hlsl"
// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Result;
int2 _TextureSize;

// 事情1， 就是找到对应的ID，目标为输出一张UV对应的图。
[numthreads(8,8,1)]
void IntegrateBRDF (uint3 SV_GroupID        : SV_GroupID,
            uint3 SV_GroupThreadID  : SV_GroupThreadID,
            uint  SV_GroupIndex     : SV_GroupIndex,
            uint3 SV_DispatchThreadID : SV_DispatchThreadID)
{
    // UVx就是x方向 0 ~ 1
    // UVy就是y方向 0 ~ 1
    
    int UVx = SV_DispatchThreadID.x;
    int UVy = SV_DispatchThreadID.y;
    float NdotV = UVx / float(_TextureSize.x);
    float roughness = UVy / float(_TextureSize.y);
    float3 V;
    // 转换成sin(), cos()
    V.x = sqrt(1.0 - NdotV*NdotV);
    V.y = 0.0;
    V.z = NdotV;

    float A = 0.0;
    float B = 0.0;

    float3 N = float3(0.0, 0.0, 1.0);

    const uint SAMPLE_COUNT = 1024;
    for(uint i = 0; i < SAMPLE_COUNT; ++i)
    {
        float2 Xi = Hammersley(i, SAMPLE_COUNT);
        float3 H  = ImportanceSampleGGX(Xi, N, roughness);
        float3 L  = normalize(2.0 * dot(V, H) * H - V);

        float NdotL = max(L.z, 0.0);
        float NdotH = max(H.z, 0.0);
        float VdotH = max(dot(V, H), 0.0);

        if(NdotL > 0.0)
        {
            float G = BRDFGeometrySmithIBL(N, V, L, roughness);
            float G_Vis = (G * VdotH) / (NdotH * NdotV);
            float Fc = pow(1.0 - VdotH, 5.0);

            A += (1.0 - Fc) * G_Vis;
            B += Fc * G_Vis;
        }
    }
    //Result[uint2(UVx, UVy)] = float4(A,B, 0.0, 0.0);
    A /= float(SAMPLE_COUNT);
    B /= float(SAMPLE_COUNT);
    //return vec2(A, B);
    Result[uint2(UVx, UVy)] = float4(A,B, 0.0, 0.0);

    
}
